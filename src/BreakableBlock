import javafx.scene.shape.Rectangle;
import javafx.scene.paint.Color;
import java.awt.*;

/**
 * @author Hunter Gregory
 */
public class BreakableBlock implements Block {
    private final Paint ALPHA_COLOR = Color.AZURE; //FIX corresponds to 1 hit remaining
    private final Paint BETA_COLOR = Color.AZURE; //FIX corresponds to 2 hits remaining
    private final Paint GAMMA_COLOR = Color.AZURE; //FIX corresponds to 3 hits remaining
    private final int MAX_HITS = 3; //update if you add more difficult blocks i.e. ones with 4 hits

    /**
     * Required constructor for this class
     * @param rectangle representing the block in 2D space
     * @param hitsRemaining to destroy the block
     * @throws java.lang.IllegalArgumentException if rectangle is null or
     *  if hitsRemaining isn't in range 0 <= hitsRemaining <= MAX_HITS.
     */
    public  BreakableBlock(Rectangle rectangle, int hitsRemaining) throws IllegalArgumentException {
        this.setHitsRemaining(hitsRemaining);
        Paint backgroundColor = determineBackground();
        if (backgroundColor == null || rectangle == null) {
            throw new IllegalArgumentException("Rectangle is null or hitsRemaining " +
                    "isn't in range 0 <= hitsRemaining <= " + MAX_HITS + ".");
        }

        rectangle.setFill(backgroundColor); //FIX
        return rectangle;
    }

    // returns null if myHitsRemaining isn't in range 1 <= myHitsRemaining <= MAX_HITS
    private Paint determineBackground() {
        switch (this.getHitsRemaining()) {
            case 1:
                return ALPHA_COLOR;
            case 2:
                return BETA_COLOR;
            case 3:
                return GAMMA_COLOR;
            default:
                return null;
        }
    }
}